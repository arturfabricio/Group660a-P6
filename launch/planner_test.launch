<launch>
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find control)/worlds/mud_wrld.world"/>
    </include>
    <include file="$(find control)/launch/spawn_quadrotor.launch" >
        <arg name="model" value="$(find cvg_sim_gazebo)/urdf/quadrotor_sensors.urdf.xacro"/>
    </include>
    <include file="$(find control)/launch/orb_slam2_mono_sim.launch" >
    </include>
	<node type="rviz" name="rviz" pkg="rviz" args="-d $(find control)/rviz/config_file.rviz" />
    <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
      <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
        <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
            <remap from="~input" to="/orb_slam2_mono/map_points" />
            <rosparam>
            filter_field_name: z
            filter_limit_min: 0.01
            filter_limit_max: 1.5
            filter_limit_negative: False
            leaf_size: 0.01
            </rosparam>
        </node>

        <!-- Estimate point normals -->
        <node pkg="nodelet" type="nodelet" name="normal_estimation" args="load pcl/NormalEstimation pcl_manager" output="screen">
            <remap from="~input" to="/voxel_grid/output" />
            <rosparam>
            # -[ Mandatory parameters
            k_search: 0
            radius_search: 0.015
            # Set the spatial locator. Possible values are: 0 (ANN), 1 (FLANN), 2 (organized)
            spatial_locator: 1
            </rosparam>
        </node>

        <!-- Segment the table plane -->
        <node pkg="nodelet" type="nodelet" name="planar_segmentation" args="load pcl/SACSegmentationFromNormals pcl_manager" output="screen">
            <remap from="~input"   to="/voxel_grid/output" />
            <remap from="~normals" to="/normal_estimation/output" />
            <rosparam>
            # -[ Mandatory parameters
            # model_type:
            # 0: SACMODEL_PLANE
            # 1: SACMODEL_LINE
            # 2: SACMODEL_CIRCLE2D
            # 3: SACMODEL_CIRCLE3D
            # 4: SACMODEL_SPHERE
            # 5: SACMODEL_CYLINDER
            # 6: SACMODEL_CONE
            # 7: SACMODEL_TORUS
            # 8: SACMODEL_PARALLEL_LINE
            # 9: SACMODEL_PERPENDICULAR_PLANE
            # 10: SACMODEL_PARALLEL_LINES
            # 11: SACMODEL_NORMAL_PLANE
            # 12: SACMODEL_NORMAL_SPHERE
            # 13: SACMODEL_REGISTRATION
            # 14: SACMODEL_REGISTRATION_2D
            # 15: SACMODEL_PARALLEL_PLANE
            # 16: SACMODEL_NORMAL_PARALLEL_PLANE
            # 17: SACMODEL_STICK
            model_type: 11
            distance_threshold: 0.1
            max_iterations: 1000
            method_type: 0
            optimize_coefficients: true
            normal_distance_weight: 0.1
            eps_angle: 0.09
            </rosparam>
        </node>

        <node pkg="nodelet" type="nodelet" name="extract_plane_indices" args="load pcl/ExtractIndices pcl_manager" output="screen">
            <remap from="~input"   to="/voxel_grid/output" />
            <remap from="~indices" to="/planar_segmentation/inliers" />
            <rosparam>
            negative: true
            </rosparam>
        </node>
        <node pkg="nodelet" type="nodelet" name="statisticalOutliers" args="load pcl/StatisticalOutlierRemoval pcl_manager" output="screen">
                <remap from="~input" to="/extract_plane_indices/output" />
                <rosparam>
                 mean_k: 50
                 stddev: 0.5
                 negative: False
                </rosparam>
        </node>

    <include file="$(find control)/launch/octomap_mapping.launch" >
        </include>

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <param name="controller_frequency" value="30.0" />  
    </node>

</launch>